"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 5.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
import sys
from pathlib import Path
from decouple import config
from datetime import timedelta
from corsheaders.defaults import default_headers

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Adicionar as pastas apps e core ao Python path
sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))
sys.path.insert(0, os.path.join(BASE_DIR, 'core'))


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=False, cast=bool)

raw_allowed_hosts = config('ALLOWED_HOSTS', default='')
if isinstance(raw_allowed_hosts, bool):
    ALLOWED_HOSTS = []
else:
    ALLOWED_HOSTS = [host.strip() for host in str(raw_allowed_hosts).split(',') if host.strip()]

# Application definition

INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    # Django Filter (opcional, para filtros avançados)
    'django_filters',
    # Django REST Framework Spectacular (para OpenAPI)
    'drf_spectacular',
    # Django REST Framework
    'rest_framework',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    # Nossos apps
    'accounts',
    'endpoints',
    'controle_acesso',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'api.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'api.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': config('DATABASE_ENGINE', default='django.db.backends.sqlite3'),
        'NAME': config('DATABASE_NAME', default='db.sqlite3'),
        'USER': config('DATABASE_USER', default=''),
        'PASSWORD': config('DATABASE_PASSWORD', default=''),
        'HOST': config('DATABASE_HOST', default='localhost'),
        'PORT': config('DATABASE_PORT', default='3306'),
        'OPTIONS': {
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
            'charset': 'utf8mb4',
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'pt-br'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Modelo de usuário customizado
AUTH_USER_MODEL = 'accounts.Usuario'

# Configurações JWT
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(hours=1),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=7),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': True,
}

# Configuração do DRF
REST_FRAMEWORK = {
    # Configuração de autenticação e permissão
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
    # Configuração de paginação
    'DEFAULT_PAGINATION_CLASS': 'core.pagination.CustomPagination',
    'PAGE_SIZE': 10,
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'core.filters.GlobalSearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'ORDERING_PARAM': 'ordering',
    # Configuração de documentação OpenAPI
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
}

# Configuração do DRF Spectacular
SPECTACULAR_SETTINGS = {
    'TITLE': 'DX Suporte API',
    'DESCRIPTION': 'Sistema completo de controle de acesso e suporte ao cliente',
    'VERSION': '1.0.0',
    'SERVE_INCLUDE_SCHEMA': False,
    
    'SERVERS': [
        {
            'url': 'http://localhost:8000',
            'description': 'Desenvolvimento Local'
        }
    ],
    
    'SCHEMA_PATH_PREFIX': '/api/v1/',
    'COMPONENT_SPLIT_REQUEST': True,
    
    # TAGS: Apenas estas 4 seções aparecerão
    'TAGS': [
        {'name': 'Autenticação', 'description': 'Endpoints de login, logout e tokens'},
        {'name': 'Usuários', 'description': 'CRUD e gestão de usuários'},
        {'name': 'Controle de Acesso', 'description': 'Grupos e permissões'},
        {'name': 'Utilitários', 'description': 'Endpoints auxiliares'},
    ],
    
    # CONFIGURAÇÕES RESTRITIVAS: Evitar seções automáticas
    'OPERATION_SORTER': 'method',
    'TAG_SORTER': 'alpha',
    'DISABLE_ERRORS_AND_WARNINGS': True,
    
    'SECURITY': [
        {
            'type': 'http',
            'scheme': 'bearer',
            'bearerFormat': 'JWT',
            'description': 'Token JWT obtido via /api/v1/auth/login/'
        }
    ],
    
    'SWAGGER_UI_SETTINGS': {
        'deepLinking': True,
        'persistAuthorization': True,
        'displayOperationId': False,
        'defaultModelsExpandDepth': 1,
        'defaultModelExpandDepth': 1,
        'displayRequestDuration': True,
        'filter': True,
        'showExtensions': True,
        'showCommonExtensions': True,
        'tagsSorter': 'alpha',
        'operationsSorter': 'method',
    },
    
    'REDOC_UI_SETTINGS': {
        'hideDownloadButton': False,
        'expandResponses': '200,201',
        'pathInMiddlePanel': True,
    },
    
    'CONTACT': {
        'name': 'DX Suporte',
        'email': 'suporte@duplexsoft.com.br',
    },
    
    'LICENSE': {
        'name': 'MIT License',
    },
    
    'SORT_OPERATIONS': True,
}

# Configurações da API
API_VERSION = 'v1' 

# Configurações do controle de acesso
CONTROLE_ACESSO = {
    # Apps que devem ser ignorados na geração automática de permissões
    'SKIP_APPS': [
        'endpoints',  # App de roteamento, não tem funcionalidade própria
        'core',  # App de utilitários, não tem funcionalidades específicas
        'django_filters',  # Django Filter, não deve ser modificado
        'rest_framework', # Django REST Framework, não deve ser modificado
        'django.contrib.admin',  # Admin do Django, não deve ser modificado
        'drf_spectacular',  # DRF Spectacular, não deve ser modificado
        # 'outro_app_meta',  # Exemplo de como adicionar outros
    ],
    
    # Ações padrão para todos os apps
    'ACOES_DEFAULT': [
        'criar',
        'visualizar', 
        'editar',
        'excluir',
        'gerenciar'
    ],
    
    # Sincronizar permissões automaticamente após migrations (produção = False)
    'AUTO_SYNC_AFTER_MIGRATE': config('AUTO_SYNC_PERMISSIONS', default=True, cast=bool),

    # Cache settings
    'CACHE_TIMEOUT': 300,  # 5 minutos
    'USE_CACHE': True,
}

# Configuração para debug de permissões em testes
DEBUG_PERMISSIONS = config('DEBUG_PERMISSIONS', default=False, cast=bool)

# Em testes, ativar debug E desativar auto-sync
if 'test' in sys.argv:
    DEBUG_PERMISSIONS = True
    # CRÍTICO: Desativar auto-sync em testes para evitar conflitos
    CONTROLE_ACESSO['AUTO_SYNC_AFTER_MIGRATE'] = False


# CONFIGURAÇÕES CORS - ADICIONAR no final do arquivo
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",    # React padrão
    "http://localhost:5173",    # Vite
    "http://127.0.0.1:3000",
    "http://127.0.0.1:5173",
]

CORS_ALLOW_CREDENTIALS = True

CORS_ALLOW_ALL_ORIGINS = True 

CORS_ALLOWED_HEADERS = list(default_headers) + [
    'authorization',
    'content-type',
    'x-requested-with',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]


APPEND_SLASH=False